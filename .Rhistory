"-R \"@RG\tID:", metadata$sample[i], "\tSM:", metadata$sample[i], "\tLB:lib1\tPL:illumina\" ",
sub(".fa|.fasta", "", reference), " ", input_dir, metadata$fastq1[i], " ", input_dir, metadata$fastq2[i], " | ",
"samtools sort -@ ", t, " -o ", output_dir, metadata$sample[i], ".bam -'")
system(paste0("docker run --rm -i -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " honzik1/bwa-mem2_samtools:2.2.1_1.13 /bin/bash -c 'bwa-mem2 mem -t ", t, " -M ",
"-R \"@RG\tID:", metadata$sample[i], "\tSM:", metadata$sample[i], "\tLB:lib1\tPL:illumina\" ",
sub(".fa|.fasta", "", reference), " ", input_dir, metadata$fastq1[i], " ", input_dir, metadata$fastq2[i], " | ",
"samtools sort -@ ", t, " -o ", output_dir, metadata$sample[i], ".bam -'"))
metadata = read.table(file = "/mnt/4TBHD2/Hypermutation_ALL/WES_data/metadata/metadata.tsv", header = TRUE, sep = "\t")
metadata_shanghai <- metadata %>% mutate(sample = Hypermutation.ID) %>% filter(Project. == "Shanghai") %>% select(sample, fastq1, fastq2)
files = metadata_shanghai %>% mutate(bam = paste0("/mnt/Backup1/alignment/", sample, "_tagged.bam"), analyzed = file.exists(bam))
metadata_rest = files %>% filter(analyzed == FALSE)
metadata_rest$fastq1 = sub(".fastq.gz", "_p.fastq", metadata_rest$fastq1)
metadata_rest$fastq2 = sub(".fastq.gz", "_p.fastq", metadata_rest$fastq2)
input_dir = "/mnt/4TBHD1/trimmed_fastq_shanghai/"
output_dir = "/mnt/Backup1/alignment/"
reference = "/mnt/4TBHD2/reference/GRCh38.p13/GRCh38.fasta"
t = 27
bwa_mem2(metadata = metadata_rest, input_dir, output_dir, reference , t)
metadata = read.table(file = "/mnt/4TBHD2/Hypermutation_ALL/WES_data/metadata/metadata.tsv", header = TRUE, sep = "\t")
metadata_tu <- metadata %>% mutate(sample = Hypermutation.ID, patient = Patient.ID., status = ifelse(Time.point_short == "CR", "c", "t")) %>%
filter(Project. == "DKTK_TÃ¼") %>% select(sample, patient, status, fastq1, fastq2)
metadata_tu$fastq1 = sub(".fastq.gz", "_p.fastq", metadata_tu$fastq1)
metadata_tu$fastq2 = sub(".fastq.gz", "_p.fastq", metadata_tu$fastq2)
input_dir = "/mnt/Backup1/tmp_tu/"
# create metadata for shangai cohort
library(dplyr)
library(magrittr)
metadata = read.table(file = "/mnt/4TBHD2/Hypermutation_ALL/WES_data/metadata/metadata.tsv", header = TRUE, sep = "\t")
metadata_s <- metadata %>% mutate(sample = Hypermutation.ID, patient = Patient.ID., status = ifelse(Time.point_short == "CR", "c", "t")) %>%
filter(Project. == "Shanghai") %>% select(sample, patient, status, fastq1, fastq2)
metadata_s
while (dockerps = system("docker ps", intern = TRUE); grepl("testtest", dockerps)) {
Sys.sleep(60)
}
system("docker ps", intern = TRUE)
grepl(metadata$sample, system("docker ps", intern = TRUE)[-1])
metadata$sample
grepl(metadata_s$sample, system("docker ps", intern = TRUE)[-1])
paste0(metadata_s$sample, collapse = "|")
grepl(paste0(metadata_s$sample, collapse = "|"), system("docker ps", intern = TRUE)[-1])
for (i in 1:5) {
system(paste0("docker run --rm -d --name ", metadata_s$sample[i], " broadinstitute/gatk:4.2.2.0 sleep 60"))
}
while (grepl(paste0(metadata_s$sample, collapse = "|"), system("docker ps", intern = TRUE)[-1])) {
Sys.sleep(10)
}
for (i in 1:5) {
system(paste0("docker run --rm -d --name ", metadata_s$sample[i], " broadinstitute/gatk:4.2.2.0 sleep 20"))
}
while (any(grepl(paste0(metadata_s$sample, collapse = "|"), system("docker ps", intern = TRUE)[-1]))) {
Sys.sleep(5)
print("containers still running")
}
metadata = metadata_s
metadata_t = metadata[metadata$status == "t", ]
metadata_c = metadata[metadata$status == "c", ]
k = 1
input_dir = "/mnt/Backup1/alignment_s_dedup/"
output_dir =  "/mnt/Backup1/vcf_s/"
reference = "/mnt/4TBHD2/reference/GRCh38.p13/GRCh38.fasta"
parallel = 6
k:(k+parallel-1)
k = 7
k:(k+parallel-1)
k = 13
k:(k+parallel-1)
k = 1
metadata_c <- metadata_c[metadata_c$patient == metadata_t$patient, ]
metadata_t = metadata[metadata$status == "t", ]
metadata_c = metadata[metadata$status == "c", ]
metadata_c[metadata_c$patient == metadata_t$patient, ]
metadata_t[1, ]
metadata_c$patient == metadata_t$patient
metadata_c
metadata_t$patient == metadata_c$patient
i = 1
metadata_c$patient == metadata_t$patient[i]
which(metadata_c$patient == metadata_t$patient[i])
paste0("docker run --rm -d --name ", metadata_t[i]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " broadinstitute/gatk:4.2.2.0 gatk Mutect2 -R ", reference,
" -I ", input_dir, metadata_t$sample[i], "_markdup.bam ", "-I ", input_dir, metadata_c$sample, "_markdup.bam ",
"-normal ", metadata_c$sample, " -O ", output_dir, metadata_t$sample[i], ".vcf")
paste0("docker run --rm -d --name ", metadata_t$sample[i]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " broadinstitute/gatk:4.2.2.0 gatk Mutect2 -R ", reference,
" -I ", input_dir, metadata_t$sample[i], "_markdup.bam ", "-I ", input_dir, metadata_c$sample, "_markdup.bam ",
"-normal ", metadata_c$sample, " -O ", output_dir, metadata_t$sample[i], ".vcf")
metadata_c <- metadata_c[which(metadata_c$patient == metadata_t$patient[i]), ]
paste0("docker run --rm -d --name ", metadata_t$sample[i]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " broadinstitute/gatk:4.2.2.0 gatk Mutect2 -R ", reference,
" -I ", input_dir, metadata_t$sample[i], "_markdup.bam ", "-I ", input_dir, metadata_c$sample, "_markdup.bam ",
"-normal ", metadata_c$sample, " -O ", output_dir, metadata_t$sample[i], ".vcf")
paste0("docker run --rm -d --name ", metadata_t$sample[i]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " broadinstitute/gatk:4.2.2.0 gatk Mutect2 -R ", reference,
" -I ", input_dir, metadata_t$sample[i], "_markdup.bam ", "-I ", input_dir, metadata_c_i$sample, "_markdup.bam ",
"-normal ", metadata_c_i$sample, " -O ", output_dir, metadata_t$sample[i], ".vcf")
metadata_c = metadata[metadata$status == "c", ]
metadata_c_i <- metadata_c[which(metadata_c$patient == metadata_t$patient[i]), ]
paste0("docker run --rm -d --name ", metadata_t$sample[i]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " broadinstitute/gatk:4.2.2.0 gatk Mutect2 -R ", reference,
" -I ", input_dir, metadata_t$sample[i], "_markdup.bam ", "-I ", input_dir, metadata_c_i$sample, "_markdup.bam ",
"-normal ", metadata_c_i$sample, " -O ", output_dir, metadata_t$sample[i], ".vcf")
paste0(metadata_t$sample[k:(k+parallel-1)], collapse = "|")
grepl(paste0(metadata_t$sample[k:(k+parallel-1)], collapse = "|"), system("docker ps", intern = TRUE)[-1]))
any(grepl(paste0(metadata_t$sample[k:(k+parallel-1)], collapse = "|"), system("docker ps", intern = TRUE)[-1]))
ii = 1
dockerps = system("docker ps", intern = TRUE)[-1]
grepl(metadata_t$sample[ii], dockerps)
print(paste0("Container ", metadata_t$sample[k], " still running"))
Mutect2 = function(metadata, input_dir, output_dir, reference, parallel) {
metadata_t = metadata[metadata$status == "t", ]
metadata_c = metadata[metadata$status == "c", ]
k = 1
for (i in k:(k+parallel-1)) {
metadata_c_i <- metadata_c[which(metadata_c$patient == metadata_t$patient[i]), ]
system(paste0("docker run --rm -d --name ", metadata_t$sample[i]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " broadinstitute/gatk:4.2.2.0 sleep 120"))
while(any(grepl(paste0(metadata_t$sample[k:(k+parallel-1)], collapse = "|"), system("docker ps", intern = TRUE)[-1]))) {
dockerps = system("docker ps", intern = TRUE)[-1]
for (ii in k:(k+parallel-1)) {
if (any(grepl(metadata_t$sample[ii], dockerps))) {
print(paste0("Container ", metadata_t$sample[k], " still running"))
}
}
Sys.sleep(30)
}
k = parallel+k
}
}
Mutect2(metadata, input_dir, output_dir, reference, parallel)
metadata_t$sample[1:6, ]
paste0("docker run --rm -d --name ", metadata_t$sample[c(1:6), ]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " broadinstitute/gatk:4.2.2.0 sleep 120")
paste0("docker run --rm -d --name ", metadata_t$sample[c(1:6)]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " broadinstitute/gatk:4.2.2.0 sleep 120")
system(paste0("docker run --rm -d --name ", metadata_t$sample[c(1:6)]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " broadinstitute/gatk:4.2.2.0 sleep 120"))
1:ceiling(nrow(metadata_t)/parallel)
i = 1
metadata_t
nrow(metadata_t)
i = 1
sample_start = ((i-1)*parallel)+1
sample_start
sample_start = ((i-2)*parallel)+1
sample_start
sample_start = ((i-1)*parallel)+1
i = 2
sample_start = ((i-1)*parallel)+1
sample_start
i = 3
sample_start = ((i-1)*parallel)+1
sample_start
i = 1
i == ceiling(nrow(metadata_t)/parallel)
sample_stop  = i*parallel
sample_start:sample_stop
i = 1
sample_start = ((i-1)*parallel)+1
metadata_c_i <- metadata_c[which(metadata_c$patient == metadata_t$patient[ii]), ]
paste0("docker run --rm -d --name ", metadata_t$sample[c(1:6)]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " broadinstitute/gatk:4.2.2.0 sleep 120")
paste0("docker run --rm -d --name ", metadata_t$sample[ii]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " broadinstitute/gatk:4.2.2.0 sleep 120")
any(grepl(paste0(metadata_t$sample[sample_start:sample_stop], collapse = "|"), system("docker ps", intern = TRUE)[-1]))
Mutect2 = function(metadata, input_dir, output_dir, reference, parallel) {
metadata_t = metadata[metadata$status == "t", ]
metadata_c = metadata[metadata$status == "c", ]
for (i in 1:ceiling(nrow(metadata_t)/parallel)) {
sample_start = ((i-1)*parallel)+1
if (i == ceiling(nrow(metadata_t)/parallel)) {
sample_stop = nrow(metadata_t)
} else {
sample_stop  = i*parallel
}
for (ii in sample_start:sample_stop) {
metadata_c_i <- metadata_c[which(metadata_c$patient == metadata_t$patient[ii]), ]
system(paste0("docker run --rm -d --name ", metadata_t$sample[ii]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " broadinstitute/gatk:4.2.2.0 sleep 120"))
}
while(any(grepl(paste0(metadata_t$sample[sample_start:sample_stop], collapse = "|"), system("docker ps", intern = TRUE)[-1]))) {
dockerps = system("docker ps", intern = TRUE)[-1]
for (iii in sample_start:sample_stop) {
if (any(grepl(metadata_t$sample[iii], dockerps))) {
print(paste0("Container ", metadata_t$sample[k], " still running"))
}
}
Sys.sleep(30)
}
}
}
Mutect2(metadata, input_dir, output_dir, reference, parallel)
Mutect2 = function(metadata, input_dir, output_dir, reference, parallel) {
metadata_t = metadata[metadata$status == "t", ]
metadata_c = metadata[metadata$status == "c", ]
for (i in 1:ceiling(nrow(metadata_t)/parallel)) {
sample_start = ((i-1)*parallel)+1
if (i == ceiling(nrow(metadata_t)/parallel)) {
sample_stop = nrow(metadata_t)
} else {
sample_stop  = i*parallel
}
for (ii in sample_start:sample_stop) {
metadata_c_i <- metadata_c[which(metadata_c$patient == metadata_t$patient[ii]), ]
system(paste0("docker run --rm -d --name ", metadata_t$sample[ii]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " broadinstitute/gatk:4.2.2.0 sleep 120"))
}
while(any(grepl(paste0(metadata_t$sample[sample_start:sample_stop], collapse = "|"), system("docker ps", intern = TRUE)[-1]))) {
dockerps = system("docker ps", intern = TRUE)[-1]
for (iii in sample_start:sample_stop) {
if (any(grepl(metadata_t$sample[iii], dockerps))) {
print(paste0("Container ", metadata_t$sample[iii], " still running"))
}
}
Sys.sleep(30)
}
}
}
Mutect2(metadata, input_dir, output_dir, reference, parallel)
devtools::document()
devtools::document()
# metadata for mutect
metadata = read.table(file = "/mnt/4TBHD2/Hypermutation_ALL/WES_data/metadata/metadata.tsv", header = TRUE, sep = "\t")
metadata_tu <- metadata %>% mutate(sample = Hypermutation.ID, patient = Patient.ID., status = ifelse(Time.point_short == "CR", "c", "t")) %>%
filter(Project. == "DKTK_TÃ¼") %>% select(sample, patient, status)
sample_dedup = sub("_markdup.bam", "", list.files("/mnt/Backup1/alignment_tu_dedup/"))
metadata_tu_dedup <- metadata_tu %>% filter(!sample %in% sample_dedup)
sample_dedup
sample_dedup = sub("_markdup.bam", "", list.files("/mnt/Backup1/alignment_tu_dedup/", pattern = "_markdup.bam"))
sample_dedup
list.files("/mnt/Backup1/alignment_tu_dedup/", pattern = "_markdup.bam")
list.files("/mnt/Backup1/alignment_tu_dedup/", pattern = "_markdup.bam$")
sample_dedup = sub("_markdup.bam", "", list.files("/mnt/Backup1/alignment_tu_dedup/", pattern = "_markdup.bam$"))
sample_dedup
metadata_tu_dedup <- metadata_tu %>% filter(!sample %in% sample_dedup)
metadata_tu_dedup
head(metadata_tu)
# metadata for mutect
metadata = read.table(file = "/mnt/4TBHD2/Hypermutation_ALL/WES_data/metadata/metadata.tsv", header = TRUE, sep = "\t")
View(metadata)
chrom_key = read.table("/mnt/4TBHD2/reference/chromosom_name_key.tsv")
chrom_key = read.table("/mnt/4TBHD2/reference/chromosom_name_key.tsv")
chrom_key = read.table("/mnt/4TBHD2/reference/chromosom_name_key.tsv", sep = "\t")
head(chrom_key)
chrom_key = read.table("/mnt/4TBHD2/reference/chromosom_name_key.tsv", sep = "\t", header = TRUE)
chrom_key = read.table("/mnt/4TBHD2/reference/chromosom_name_key.tsv", sep = "\t", header = TRUE)
chrom_key_bcf_tools <- chrom_key[, c("GenBank-Accn", "UCSC-style-name")]
chrom_key = read.table("/mnt/4TBHD2/reference/chromosom_name_key.tsv", sep = "\t", header = TRUE)
colnames(chrom_key)
chrom_key_bcf_tools <- chrom_key[, c("GenBank.Accn", "UCSC.style.name")]
write.table(chrom_key_bcf_tools, "/mnt/4TBHD2/reference/chrom_name_genbank_ucsc", sep = " ", row.names = FALSE, col.names = FALSE)
key = "/mnt/4TBHD2/reference/chrom_name_genbank_ucsc"
paste0("docker run --rm -i --name ", metadata_t$sample[i]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir,
" -v ", dirname(key), ":", dirname(key), " biocontainers/bcftools:v1.9-1-deb_cv1 bcftools annotate --rename-chrs ",
key, " ", input_dir, metadata_t$sample[i], " > ", output_dir, metadata_t$sample[i])
rename_chrs <- function(metadata, input_dir, output_dir, key) {
rename_chrs <- function(metadata, input_dir, output_dir, key) {
metadata_t = metadata[metadata$status == "t", ]
for (i in 1:nrow(metadata_t)) {
system(paste0("docker run --rm -i --name ", metadata_t$sample[i]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir,
" -v ", dirname(key), ":", dirname(key), " biocontainers/bcftools:v1.9-1-deb_cv1 bcftools annotate --rename-chrs ",
key, " ", input_dir, metadata_t$sample[i], "_filtered.vcf" " > ", output_dir, metadata_t$sample[i], "_rename_test.vcf"))
}
}
paste0("docker run --rm -i --name ", metadata_t$sample[i]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir,
" -v ", dirname(key), ":", dirname(key), " biocontainers/bcftools:v1.9-1-deb_cv1 bcftools annotate --rename-chrs ",
key, " ", input_dir, metadata_t$sample[i], "_filtered.vcf" " > ", output_dir, metadata_t$sample[i], "_rename_test.vcf")
rename_chrs <- function(metadata, input_dir, output_dir, key) {
metadata_t = metadata[metadata$status == "t", ]
for (i in 1:nrow(metadata_t)) {
system(paste0("docker run --rm -i --name ", metadata_t$sample[i], " -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir,
" -v ", dirname(key), ":", dirname(key), " biocontainers/bcftools:v1.9-1-deb_cv1 bcftools annotate --rename-chrs ",
key, " ", input_dir, metadata_t$sample[i], "_filtered.vcf > ", output_dir, metadata_t$sample[i], "_rename_test.vcf"))
}
}
input_dir = "/mnt/Backup1/vcf_tu/"
out_dir = "/mnt/Backup1/vcf_tu/"
rename_chrs(metadata_tu[1, ], input_dir, output_dir, key)
rename_chrs <- function(metadata, input_dir, output_dir, key) {
metadata_t = metadata[metadata$status == "t", ]
for (i in 1:nrow(metadata_t)) {
system(paste0("docker run --rm -i --name ", metadata_t$sample[i], " -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir,
" -v ", dirname(key), ":", dirname(key), " biocontainers/bcftools:v1.9-1-deb_cv1 bcftools annotate --rename-chrs ",
key, " ", input_dir, metadata_t$sample[i], "_filtered.vcf > ", output_dir, metadata_t$sample[i], "_rename_test.vcf"))
}
}
rename_chrs(metadata_tu[1, ], input_dir, output_dir, key)
metadata_t = metadata_tu[1, ],
metadata_t = metadata_tu[1, ]
paste0("docker run --rm -i --name ", metadata_t$sample[i], " -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir,
" -v ", dirname(key), ":", dirname(key), " biocontainers/bcftools:v1.9-1-deb_cv1 bcftools annotate --rename-chrs ",
key, " ", input_dir, metadata_t$sample[i], "_filtered.vcf > ", output_dir, metadata_t$sample[i], "_rename_test.vcf")
out_dir = "/mnt/Backup1/vcf_tu/"
write.table(chrom_key_bcf_tools, "/mnt/4TBHD2/reference/chrom_name_genbank_ucsc", sep = " ", row.names = FALSE, col.names = FALSE, quote = FALSE)
rename_chrs(metadata_tu[1, ], input_dir, output_dir, key)
paste0("docker run --rm -i --name ", metadata_t$sample[i], " -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir,
" -v ", dirname(key), ":", dirname(key), " biocontainers/bcftools:v1.9-1-deb_cv1 bcftools annotate --rename-chrs ",
key, " ", input_dir, metadata_t$sample[i], "_filtered.vcf > ", output_dir, metadata_t$sample[i], "_rename_test.vcf")
output_dir
output_dir = "/mnt/Backup1/vcf_tu/"
rename_chrs(metadata_tu[1, ], input_dir, output_dir, key)
write.table(chrom_key_bcf_tools, "/mnt/4TBHD2/reference/chrom_name_genbank_ucsc", sep = "/t", row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(chrom_key_bcf_tools, "/mnt/4TBHD2/reference/chrom_name_genbank_ucsc", sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
# Perform somatic variant analysis from pre-processed fastq files
SNPsom_wrapper <- function(metadata, input_dir, output_dir, reference, t, parallel, reference_version, annotation_dir) {
# Perform alignment with bwa-mem2
dir.create(paste0(output_dir, "/alignment/"))
output_dir_alignment = paste0(output_dir, "/alignment/")
bwa-mem2(metadata, input_dir, output_dir_alignment, reference, t)
# Mark duplicates with MarkDuplicatesSpark
dir.create(paste0(output_dir, "/MarkDuplicates/"))
output_dir_MarkDuplicates = paste0(output_dir, "/MarkDuplicates/")
MarkDuplicatesSpark(metadata, output_dir_alignment, output_dir_MarkDuplicates, t)
# Call somatic SNV with Mutect2 and filter variants with FilterMutectcalls
dir.create(paste0(output_dir, "/vcf/"))
output_dir_vcf = paste0(output_dir, "/vcf/")
Mutect2(metadata, output_dir_MarkDuplicates, output_dir_vcf, reference, parallel)
FilterMutectCalls(metadata, output_dir_vcf, output_dir_vcf)
# Annotate variants - to be tested
#Funcotator(metadata, output_dir_vcf, output_dir_vcf, reference, reference_version, annotation_dir)
}
#' GATK sequence dictionary and samtools index, if the files do not exist, they
#' will be automatically created.
#'
#'@param metadata data frame;
#'@param input_dir character; path to the input directory
#'@param output_dir character; path to output directory
#'@param reference character; path to the fasta genome reference file. Bwa-mem2 created index must be in the same directory.
#'@param t numeric; number of threads to use; default-2
#'@param parallel; how many samples should be ran in parallel, each one will need around 15 GB of RAM
#'
Mutect2 = function(metadata, input_dir, output_dir, reference, parallel) {
# check for reference dictionary file and samtools index
if(!file.exists(sub(".fa$|.fasta$", ".dict", reference))) {
print("NO DICTIONARY FILE FOR REFERENCE DETECTED, REFERENCE DICTIONARY WILL BE AUTOMATICALLY GENERATED")
system(paste0("docker run --rm -i -v ", dirname(reference), ":", dirname(reference),
" broadinstitute/gatk:4.2.2.0 gatk CreateSequenceDictionary -R ", reference))
}
if(!file.exists(paste0(reference, ".fai"))) {
print("NO FASTA INDEX FOR REFERENCE DETECTED, FASTA INDEX WILL BE AUTOMATICALLY GENERATED")
system(paste0("docker run --rm -i -v ", dirname(reference), ":", dirname(reference),
" broadinstitute/gatk:4.2.2.0 gatk samtools faidx ", reference))
}
metadata_t = metadata[metadata$status == "t", ]
metadata_c = metadata[metadata$status == "c", ]
for (i in 1:ceiling(nrow(metadata_t)/parallel)) {
sample_start = ((i-1)*parallel)+1
if (i == ceiling(nrow(metadata_t)/parallel)) {
sample_stop = nrow(metadata_t)
} else {
sample_stop  = i*parallel
}
for (ii in sample_start:sample_stop) {
metadata_c_i <- metadata_c[which(metadata_c$patient == metadata_t$patient[ii]), ]
system(paste0("docker run --rm -d --name ", metadata_t$sample[ii]," -v ", input_dir, ":", input_dir, " -v ", output_dir, ":", output_dir, " -v ",
dirname(reference), ":", dirname(reference), " broadinstitute/gatk:4.2.2.0 gatk Mutect2 -R ", reference,
" -I ", input_dir, metadata_t$sample[ii], "_markdup.bam ", "-I ", input_dir, metadata_c_i$sample, "_markdup.bam ",
"-normal ", metadata_c_i$sample, " -O ", output_dir, metadata_t$sample[ii], ".vcf"))
}
k = 1
while(any(grepl(paste0(metadata_t$sample[sample_start:sample_stop], collapse = "|"), system("docker ps", intern = TRUE)[-1]))) {
dockerps = system("docker ps", intern = TRUE)[-1]
for (iii in sample_start:sample_stop) {
if (any(grepl(metadata_t$sample[iii], dockerps))) {
print(paste0("Container ", metadata_t$sample[iii], " still running"))
}
}
Sys.sleep(300)
print(paste0("Analysis running for: ", k*5, " minutes"))
k = k+1
}
}
}
install.packages("shiny")
library(shiny)
# test server func
shinyAppServer <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
devtools::load_all()
devtools::load_all()
devtools::load_all()
launchApp()
launchApp()
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
devtools::load_all()
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
input$metadata_file
input$metadata_file
devtools::load_all()
launchApp()
devtools::load_all()
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
metadata_small = read.csv("/mnt/4TBHD2/Hypermutation_ALL/WES_data/test_data/metadata_small.csv", header = TRUE)
metadata_small
write.table(metadata_small, "/mnt/4TBHD2/Hypermutation_ALL/WES_data/test_data/metadata_small.tsv", sep = "\t", col.names = TRUE, row.names = FALSE)
devtools::load_all()
launchApp()
devtools::load_all()
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
runApp(display.mode = "showcase")
runApp(appDir = "R/", display.mode = "showcase")
launchApp() display.mode = "showcase")
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
input
input$config_file
devtools::load_all()
launchApp()
launchApp()
input_dir
output_dir
reference
reference_version
annotation_dir
out_dir
output_dir
str(output_dir)
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
config_table
c(react_val$input_dir, react_val$output_dir, react_val$reference, react_val$annotation_dir)
react_val$input_dir
react_val$outpu_dir
react_val$reference
react_val$annotation_dir
c(react_val$input_dir, react_val$output_dir, react_val$reference, react_val$annotation_dir)
c(react_val$input_dir, react_val$reference, react_val$annotation_dir)
c(react_val$output_dir, react_val$reference, react_val$annotation_dir)
react_val$output_dir
devtools::load_all()
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
config_table
devtools::load_all()
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
system("lscpu | egrep '^CPU\(s\)'", intern = TRUE)
system("lscpu | egrep '^CPU\(s\)'", intern = TRUE)
system("lscpu | egrep '^CPU\\(s\\)'", intern = TRUE)
grep("[0-9]+", system("lscpu | egrep '^CPU\\(s\\)'", intern = TRUE)
)
grep("[0-9]+", system("lscpu | egrep '^CPU\\(s\\)'", intern = TRUE), value = TRUE)
grep("[0-9]+", strsplit(system("lscpu | egrep '^CPU\\(s\\)'", intern = TRUE), split = " "), value = TRUE)
strsplit(system("lscpu | egrep '^CPU\\(s\\)'", intern = TRUE), split = " ")
grep("[0-9]+", c(strsplit(system("lscpu | egrep '^CPU\\(s\\)'", intern = TRUE), split = " ")), value = TRUE)
grep("[0-9]+", strsplit(system("lscpu | egrep '^CPU\\(s\\)'", intern = TRUE), split = " "), value = TRUE)
grep("[0-9]+", strsplit(system("lscpu | egrep '^CPU\\(s\\)'", intern = TRUE), split = " ")[[1]], value = TRUE)
system("free -h", intern = TRUE)
system("cat /proc/meminfo", intern = TRUE)
strsplit(system("cat /proc/meminfo", intern = TRUE)[1], split = " "_
strsplit(system("cat /proc/meminfo", intern = TRUE)[1], split = " ")
grep("[0-9]+", strsplit(system("cat /proc/meminfo", intern = TRUE)[1], split = " "), value = TRUE)
grep("[0-9]+", strsplit(system("cat /proc/meminfo", intern = TRUE)[1], split = " ")[[1]], value = TRUE)
as.numeric(grep("[0-9]+", strsplit(system("cat /proc/meminfo", intern = TRUE)[1], split = " ")[[1]], value = TRUE))/1000000
floor((as.numeric(grep("[0-9]+", strsplit(system("cat /proc/meminfo", intern = TRUE)[1], split = " ")[[1]], value = TRUE))/1000000)/15)
as.numeric(grep("[0-9]+", strsplit(system("cat /proc/meminfo", intern = TRUE)[1], split = " ")[[1]], value = TRUE))/1000000)
as.numeric(grep("[0-9]+", strsplit(system("cat /proc/meminfo", intern = TRUE)[1], split = " ")[[1]], value = TRUE))/1000000
devtools::load_all()
devtools::load_all()
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
devtools::load_all()
launchApp()
